import sys
from PySide6.QtWidgets import (QApplication, QMainWindow, QPushButton, QLabel, QVBoxLayout,
                            QWidget, QLineEdit, QTextEdit, QComboBox, QMessageBox, QFrame, 
                            QHBoxLayout, QScrollArea, QInputDialog, QDialog)
from PySide6.QtGui import QIcon, QPixmap, QFont
from PySide6.QtCore import Qt, QTimer, QPropertyAnimation, QEasingCurve, QSize, QEvent
from src.model import LeitnerService
from functools import partial
from datetime import datetime, timedelta

class CardManagementView(QWidget):
    def __init__(self):
        super().__init__()
        self.leitner_service = LeitnerService()  
        self.init_view_cards()

    def init_view_cards(self):
        """Interface pour afficher toutes les cartes avec une UI am√©lior√©e et d√©filement vertical, avec options de modification."""
        # Cr√©ation d'un conteneur pour le d√©filement
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)

        # Conteneur pour le contenu √† faire d√©filer
        scroll_content = QWidget()
        scroll_layout = QVBoxLayout(scroll_content)

        all_cards = self.leitner_service.get_all_cards()

        if not all_cards:
            empty_label = QLabel("Aucune carte n'a √©t√© trouv√©e.")
            empty_label.setAlignment(Qt.AlignCenter)
            scroll_layout.addWidget(empty_label)
        else:
            for card in all_cards:
                # Cr√©er un conteneur pour chaque carte
                card_frame = QFrame()
                card_frame.setFrameShape(QFrame.StyledPanel)
                card_frame.setStyleSheet("background-color: #f9f9f9; border-radius: 8px; padding: 10px; margin-bottom: 10px;")

                card_layout = QVBoxLayout()

                # Titre de la carte (question)
                card_label = QLabel(f"üìã {card['question']} (Bo√Æte {card['box'] + 1})")
                card_label.setStyleSheet("font-size: 16px; font-weight: bold; color: #333;")
                card_layout.addWidget(card_label)

                # Affichage de la cat√©gorie
                category_label = QLabel(f"Cat√©gorie : {card.get('category', 'Aucune cat√©gorie')}")
                category_label.setStyleSheet("font-size: 14px; color: #555;")
                card_layout.addWidget(category_label)

                # Ligne horizontale pour les boutons d'action
                action_layout = QHBoxLayout()

                # Bouton Supprimer avec ic√¥ne
                btn_delete = QPushButton("Supprimer")
                btn_delete.setIcon(QIcon("icons/trash.png"))
                btn_delete.setStyleSheet("color: white; background-color: #e74c3c; border-radius: 4px; padding: 5px;")
                btn_delete.clicked.connect(partial(self.delete_card, card['question']))
                action_layout.addWidget(btn_delete)

                # Bouton Modifier Question
                btn_edit_question = QPushButton("Modifier Question")
                btn_edit_question.setIcon(QIcon("icons/edit.png"))
                btn_edit_question.setStyleSheet("color: white; background-color: #f39c12; border-radius: 4px; padding: 5px;")
                btn_edit_question.clicked.connect(partial(self.edit_card_field, card['question'], 'question'))
                action_layout.addWidget(btn_edit_question)

                # Bouton Modifier R√©ponse
                btn_edit_answer = QPushButton("Modifier R√©ponse")
                btn_edit_answer.setIcon(QIcon("icons/edit.png"))
                btn_edit_answer.setStyleSheet("color: white; background-color: #f39c12; border-radius: 4px; padding: 5px;")
                btn_edit_answer.clicked.connect(partial(self.edit_card_field, card['question'], 'command'))
                action_layout.addWidget(btn_edit_answer)

                # Bouton Modifier Cat√©gorie
                btn_edit_category = QPushButton("Modifier Cat√©gorie")
                btn_edit_category.setIcon(QIcon("icons/edit.png"))
                btn_edit_category.setStyleSheet("color: white; background-color: #16a085; border-radius: 4px; padding: 5px;")
                btn_edit_category.clicked.connect(partial(self.edit_card_category, card['question']))
                action_layout.addWidget(btn_edit_category)

                # Bouton D√©placer avec menu d√©roulant pour s√©lectionner la bo√Æte
                btn_move = QPushButton("D√©placer")
                btn_move.setIcon(QIcon("icons/move.png"))
                btn_move.setStyleSheet("color: white; background-color: #3498db; border-radius: 4px; padding: 5px;")
                combo_box = QComboBox()
                combo_box.addItems([f"Bo√Æte {i + 1}" for i in range(5)])
                action_layout.addWidget(combo_box)

                btn_move.clicked.connect(partial(self.move_card, card['question'], combo_box))
                action_layout.addWidget(btn_move)

                # Ajouter le layout d'action √† la carte
                card_layout.addLayout(action_layout)
                card_frame.setLayout(card_layout)

                # Ajouter le cadre de la carte au layout principal
                scroll_layout.addWidget(card_frame)

        # Configurer le widget de d√©filement
        scroll_area.setWidget(scroll_content)

        # Bouton de retour

        btn_back = QPushButton("Retour")
        btn_back.clicked.connect(self.close)
        scroll_layout.addWidget(btn_back)

        # Mise en place du layout principal
        main_layout = QVBoxLayout()
        main_layout.addWidget(scroll_area)  # Ajoutez la zone de d√©filement au layout principal
        self.setLayout(main_layout)


    def edit_card_field(self, question, field):
        """Ouvre une bo√Æte de dialogue pour modifier le champ sp√©cifi√© (question ou r√©ponse) d'une carte."""
        card = self.leitner_service.get_card_by_question(question)
        
        if not card:
            QMessageBox.warning(self, "Erreur", "Carte introuvable.")
            return

        # Bo√Æte de dialogue pour l'√©dition
        dialog = QInputDialog(self)
        dialog.setWindowTitle(f"Modifier {field.capitalize()}")

        if field == 'question':
            dialog.setLabelText("Nouvelle question :")
            dialog.setTextValue(card['question'])
        elif field == 'command':
            dialog.setLabelText("Nouvelle r√©ponse :")
            dialog.setTextValue(card.get('command', ""))

        if dialog.exec_() == QDialog.Accepted:
            new_value = dialog.textValue()
            
            if new_value:
                card[field] = new_value
                self.leitner_service.update_card(card)
                QMessageBox.information(self, "Modifi√©", f"La {field} a √©t√© mise √† jour.")
            else:
                QMessageBox.warning(self, "Erreur", f"Le champ {field} ne peut pas √™tre vide.")
        
        self.init_view_cards()


    def edit_card_category(self, question):
        """Permet de modifier la cat√©gorie associ√©e √† une carte."""
        card = self.leitner_service.get_card_by_question(question)
        
        if not card:
            QMessageBox.warning(self, "Erreur", "Carte introuvable.")
            return

        # Bo√Æte de dialogue pour l'√©dition de la cat√©gorie
        dialog = QInputDialog(self)
        dialog.setWindowTitle("Modifier Cat√©gorie")
        dialog.setLabelText("Nouvelle cat√©gorie :")
        dialog.setTextValue(card.get('category', ""))

        if dialog.exec_() == QDialog.Accepted:
            new_category = dialog.textValue()

            if new_category:
                card['category'] = new_category
                self.leitner_service.update_card(card)
                QMessageBox.information(self, "Modifi√©", f"La cat√©gorie a √©t√© mise √† jour.")
            else:
                QMessageBox.warning(self, "Erreur", "La cat√©gorie ne peut pas √™tre vide.")
        
        self.init_view_cards()


        
    def delete_card(self, question):
        """Supprime une carte."""
        self.leitner_service.delete_card(question)
        QMessageBox.information(self, "Supprim√©", f"La carte '{question}' a √©t√© supprim√©e.")
        self.init_view_cards()

    def get_next_revision_time(box):
        """Renvoie la dur√©e jusqu'√† la prochaine r√©vision en fonction de la bo√Æte."""
        now = datetime.now()
        
        if box == 0:
            return now + timedelta(minutes=10)  # Bo√Æte 1: 10 minutes
        elif box == 1:
            return now + timedelta(days=1)  # Bo√Æte 2: 1 jour
        elif box == 2:
            return now + timedelta(weeks=1)  # Bo√Æte 3: 1 semaine
        elif box == 3:
            return now + timedelta(weeks=4)  # Bo√Æte 4: 1 mois (approximatif)
        elif box == 4:
            return now + timedelta(weeks=26)  # Bo√Æte 5: 6 mois
        else:
            return now



    def move_card(self, question, combo_box):
        """D√©place une carte vers une autre bo√Æte et met √† jour la date de r√©vision."""
        target_box = combo_box.currentIndex()
        self.leitner_service.move_card(question, target_box)
        
        # Ajouter la date de prochaine r√©vision
        card = self.leitner_service.get_card_by_question(question)
        card['next_revision'] = self.get_next_revision_time(target_box)
        self.leitner_service.update_card(card)

        QMessageBox.information(self, "D√©plac√©", f"La carte '{question}' a √©t√© d√©plac√©e vers la bo√Æte {target_box + 1}.")
        self.init_view_cards()

